{
  "let": {
    "prefix": "let",
    "body": [
      "let ${2:varname} : ${3:type} = ${4:expr}$0"
    ],
    "description": "unmutable var declaration"
  },
  "let_mut": {
    "prefix": "let_mut",
    "body": [
      "let mut ${2:varname} : ${3:type} = ${4:expr}$0"
    ],
    "description": "mutable var declaration"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:expr} {",
      "\t$0",
      "} else {",
      "\t",
      "}",
    ],
    "description": "if-else"
  },
  "if-let": {
    "prefix": "if?",
    "body": [
      "if let ${1|Some(e),Err(e)|} = ${2:expr} {",
      "\t$0",
      "}",
    ],
    "description": "if-let"
  },
  "match": {
    "prefix": "match",
    "body": [
      "match ${1:expr} {",
      "\t$0",
      "}",
    ],
    "description": "match expr"
  },
  "loop": {
    "prefix": "loop",
    "body": [
      "loop {",
      "\t$0",
      "}",
    ],
    "description": "infinite loop"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:index}, ${2:value} in ${3:iterator} {",
      "\t$0",
      "}",
    ],
    "description": "for loop"
  },
  "while": {
    "prefix": "wh",
    "body": [
      "while ${1:test} {",
      "\t$0",
      "}",
    ],
    "description": "while loop"
  },
  "while?": {
    "prefix": "wh",
    "body": [
      "while let Some(${1:value}) = ${2:optional} {",
      "\t$0",
      "}",
    ],
    "description": "while let loop"
  },
  "struct": {
    "prefix": "stru",
    "body": [
      "struct ${2:name}${3:<T>} {",
      "\t$0",
      "}",
    ],
    "description": "struct decl"
  },
  "astruct": {
    "prefix": "stru_tup",
    "body": [
      "struct ${1:name}${2:<T>} ($0)",
    ],
    "description": "tuple struct decl"
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "enum ${2:name}${3:<T>} {",
      "\t$0",
      "}",
    ],
    "description": "enum decl"
  },
  "trait": {
    "prefix": "trait",
    "body": [
      "trait ${2:name}${3:<T>} {",
      "\t$0",
      "}",
    ],
    "description": "trait decl"
  },
  "impl_known_trait": {
    "prefix": "impl_known",
    "body": [
      "impl ${1|Clone,Copy,Debug,Deref,Display,Drop,Hashable,Send,Sync|} for ${2:type} {",
      "\t$0",
      "}",
    ],
    "description": "impl a known trait for type"
  },
  "impl_trait": {
    "prefix": "impl_t",
    "body": [
      "impl ${1:trait_name} for ${2:type} {",
      "\t$0",
      "}",
    ],
    "description": "impl a trait for type"
  },
  "const/method": {
    "prefix": "impl",
    "body": [
      "impl ${1:type} {",
      "\tfn new($0) -> Self {",
      "\t\tSelf {}",
      "\t}",
      "}"
    ],
    "description": "impl constructor/method"
  },
  "fn": {
    "prefix": "fn",
    "body": [
      "fn ${1:name}(${2:args})${3:->Result<${4:i32}>}{",
      "\t1",
      "}",
    ],
    "description": "fn decl"
  },
  "method": {
    "prefix": "fn_met",
    "body": [
      "fn ${1:name}(${2:&self},$3)${4:->${5:Result<i32>}}{",
      "\t1",
      "}",
    ],
    "description": "method decl"
  },
  "async_fn": {
    "prefix": "async",
    "body": [
      "async fn ${1:name}(${2:args})${3:->Result<${4:i32}>}{",
      "\tOk(1)",
      "}",
    ],
    "description": "async fn decl"
  },
  "mod": {
    "prefix": "mod",
    "body": [
      "${1|mod,pub mod|} {",
      "\t$0",
      "}",
    ],
    "description": "module decl"
  },
  "use": {
    "prefix": "use",
    "body": [
      "use ${1:crate}::$0",
    ],
    "description": "use crate/type/fn"
  },
  "test_mod": {
    "prefix": "test_mod",
    "body": [
      "#[cfg(test)]",
      "mod {",
      "\t$0",
      "}",
    ],
    "description": "module test decl"
  },
  "test_fn": {
    "prefix": "fn_test",
    "body": [
      "#[test]",
      "fn ${1:name}($0) -> i32 {",
      "\t1",
      "}",
    ],
    "description": "test fn decl"
  },
  "attribute": {
    // https://doc.rust-lang.org/reference/attributes.html
    "prefix": "attr",
    "body": "#${1:!}[${2|allow,cfg,cfg_attr,dead_code,deny,derive,forbid,macro_use,test,warn|}$0]",
    "description": "WIP attributes"
  },
  "derive_known": {
    "prefix": "derive_known",
    "body": "#${1:!}[derive(${2|Clone,Copy,Default,Debug,Eq,Hash,Ord,PartialEq,PartialOrd|})]",
    "description": "can derive known traits"
  },
}
